** Questions Solving:

1) Stock sell and return Max-

Ans:

import java.util.*;
class Main
{
    public static void main(String args[])
    {
        int arr[]={7,1,5,3,6,4};
        Scanner sc=new Scanner(System.in);
        int buyDay=sc.nextInt();
        
        int maxProfit=0;
        if(buyDay<0 || buyDay>=arr.length-1)
        {
            System.out.println("Invlaid Index");
        }
        else
        {
            for(int i=buyDay+1;i<arr.length;i++)
            {
                int profit=arr[i]-arr[buyDay];
                if(profit>maxProfit)
                {
                    maxProfit=profit;
                }
            }
        System.out.println(maxProfit);
        }
    }
}

(or)

Ans:

import java.util.*;
class Main{
    public static void main(String[] args){
        int arr[]={7,1,5,3,6,4};
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int maxProfit=0;
        for(int i=n+1;i<arr.length;i++)
        {
            int profit=arr[i]-arr[n];
           
             if(profit>maxProfit)
            {
                maxProfit=profit;
            }
        }
        System.out.println(maxProfit);
    }
}

--------------------------------------------------------------------------------------------------------------------------
** Mono-tonic stack 
***Stack***
Operations:
Pop=> Removing the last operation in the stack
Push=> Add an element.
Peek=> It will give top most element.

1) Next greatest element.
Input:             Output:
[2,8,1,4,3,6]---->[8,-1,4,6,6,-1]

Steps:

Step-by-Step Trace:
We initialize:

An empty stack []

An output array: same size, all 0s initially

Step 1: i = 5, arr[i] = 6
Stack: []

No element to the right → NGE = -1

Push 6 → Stack: [6]

Result so far: [_, _, _, _, _, -1]

Step 2: i = 4, arr[i] = 3
Stack: [6]

6 > 3 → NGE = 6

Push 3 → Stack: [6, 3]

Result so far: [_, _, _, _, 6, -1]

Step 3: i = 3, arr[i] = 4
Stack: [6, 3]

3 <= 4 → Pop 3

Now 6 > 4 → NGE = 6

Push 4 → Stack: [6, 4]

Result so far: [_, _, _, 6, 6, -1]

Step 4: i = 2, arr[i] = 1
Stack: [6, 4]

4 > 1 → NGE = 4

Push 1 → Stack: [6, 4, 1]

Result so far: [_, _, 4, 6, 6, -1]

Step 5: i = 1, arr[i] = 8
Stack: [6, 4, 1]

1 <= 8 → Pop 1

4 <= 8 → Pop 4

6 <= 8 → Pop 6

Stack is now empty → NGE = -1

Push 8 → Stack: [8]

Result so far: [_, -1, 4, 6, 6, -1]

Step 6: i = 0, arr[i] = 2
Stack: [8]

8 > 2 → NGE = 8

Push 2 → Stack: [8, 2]

Result so far: [8, -1, 4, 6, 6, -1]

Eg:

import java.util.*;

class Main {
    public static void main(String[] args) {
        int[] arr = {2, 8, 1, 4, 3, 6};
        int n = arr.length;
        int[] result = new int[n];
        Stack<Integer> stack = new Stack<>();

        for (int i = n - 1; i >= 0; i--) {
            // Pop elements that are less than or equal to current
            while (!stack.isEmpty() && stack.peek() <= arr[i]) {
                stack.pop();
            }

            // If stack is empty, no greater element
            result[i] = stack.isEmpty() ? -1 : stack.peek();

            // Push current element to stack
            stack.push(arr[i]);
        }

        System.out.println("Next Greater Elements: " + Arrays.toString(result));
    }
}

-----------------------------------------------------------------------------------------------------------------------------
**ArrayList

Syntax:

class Main{
      public static void main(String[] args){
              Lise<Wrapper class of List type> ArrayListName = new ArrayList<>();
              List<Integer> arr =new ArrayList<>();
      }
}

// List is an interface and the angular brackets are generics.
=> ArrayList is Belongs to collection frame works.
=> Here in collections we have to use Wrapper class.Followed by ArrayName.
=> Interface contains incompleted methods and class contains complete methods.
=> As ArrayList is a class ,we have to import arrayList class.

Eg:

class Main{
    public static void main(String[] args){
        List<Integer> Leader =new ArrayList<>();
        int[] arr={5,6,2,,8,2,6};
        int max=Integer.MIN_VALUE;
        for(int i=arr.length-1;i>=0;i--)
        {
            if(arr[i]>max)
            {
                Leader.add(arr[i]);
                max=arr[i];
            }
        }
        Collections.reverse(Leaders);
        System.out.println(Leaders);
    }
}

--------------------------------------------------------------------------------------------------------------------------

** Greedy Algorithm

// A greedy algorithm is like making the best choice you can at this very moment.
=> Hoping that by doing this repeatedly, you'll end up with the best overall result.
=> It's about being shortsighted but optimistic.

Syntax tamplate of Greedy algorithm:

class Main{
public static void main(String[] args){
int start,end;
Meeting(int start,int end){
this.start = start;
this.end=end;
}
}
public class MeetingScheduler{
public static intMeeting
