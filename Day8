**Assign cookies
// Here we are using sort of array to make all test cases clear.
=> We use while loop to verify the arr and make the cookies assign to the child greed value which is higher or equal to the greed.

Eg:

import java.util.*;
class Solution {
    public int findContentChildren(int[] g, int[] s) {
        int child=0;
        int cookie=0;

        Arrays.sort(g);
        Arrays.sort(s);

        while(child < g.length && cookie < s.length )
        {
            if(s[cookie] >= g[child])
            {
                child++;
            }
            cookie++;
        }
        return child;
    }
}

-------------------------------------------------------------------------------------------------------------------------
**** Recursion ****

// Recursion means that a function call itself untill it reach the base condition.
=> Base condition is nothing but we are telling , at which time we need to forward the response to previous method call.
=> In java, we dont have pointers so we cant use refernce, java is strictly pass by value.not pass by refernce.
=> If we didnt mention Base conditon properly , we wil get an exception called stack Overflow.
=> Recursions are used to break the Problem into smaller sub problems.

fact(5)
n*n-1=>5*(5-1)=>5*fact(4)
n*n-1=>4*(4-1)=4*fact(3)
n*n-1=>3*(3-1)=3*fact(2)
n*n-1=>2*(2-1)=2*fact(1)
n*n-1=>1*(1-1)=1*fact(0) wrong so return to previous function.

When we get 0 as out in factorial we return to every function they came from.

---------------------------------------------------------------------------------------------------------------------------
*** To give change for money 

Eg:

class Main {
    public static void main(String[] args) {
      int arr[]={5,5,10,10,20};
      System.out.println(satisfies(arr));
}
static boolean satisfies(int arr[])
{
       int fives=0;
       int tens=0;
       int twenties=0;
       
       for(int i=0;i<arr.length;i++)
       {
           if(arr[i]==5)
           {
               fives++;
           }
          else if(arr[i]==10)
          {
              tens++;
              fives--;
          }
          else if(arr[i]==20)
          {
              twenties++;
              if(fives>0 && tens>0)
              {
                  tens=tens-1;
                  fives=fives-1;
              }
              else if(fives==3)
              {
                  fives=fives-3;
              }
              else
              {
                  return false;
              }         
          }
       }    
    return true;
}
}

--------------------------------------------------------------------------------------------------------------------------
*** Q: Reverse an array using 2 pointer technique.

import java.util.*;
class Main
{
    public static void main(String args[])
    {
        int arr[]={1,3,2,4,6,5};
        reverse(arr);
        System.out.println(Arrays.toString(arr));
    }
    
    static void reverse(int[] arr)
    {
        int start=0;
        int end=arr.length-1;
        while(start<end)
        {
            swap(arr,start,end);
            start++;
            end--;
        }
    }
    static void swap(int[] arr,int first,int second)
    {
        int temp=arr[first];
        arr[first]=arr[second];
        arr[second]=temp;
    }
}

--------------------------------------------------------------------------------------------------------------------
*** Palindrome Number ***
Given an integer x, return true if x is a palindrome, and false otherwise.
Example 1:

Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.
Example 2:

Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Code: 

class Solution {
    public boolean isPalindrome(int x) {

        String strNum=Integer.toString(x);
        int start=0;
        int end=strNum.length()-1;

        while(start<end)
        {
            if(strNum.charAt(start)!=strNum.charAt(end))
            {
                return false;
            }
            start++;
            end--;
        }

        return true;
        
    }
}
