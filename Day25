***LeetCode Q-26
-Check the duplicates in an array and counting no.of unique nums in a array and return.

class Solution {
    public int removeDuplicates(int[] arr) {
        if(arr.length==0)
        {
            return 0;
        }
        int i=0;
        for(int j=1;j<arr.length;j++){
            if(arr[j]!=arr[i]){
                i++;
                arr[i]=arr[j];
            }
        }
        return i+1;
    }
}


***LeetCode Q-1752
-Checking the array is a rotated sorted array or not

class Solution {
    public boolean check(int[] arr) {
        int n=arr.length;
        int count=0;
        for(int i=0;i<n;i++){
            if(arr[i]>arr[(i+1)%n]){
                count++;
            }
            if(count>1)
            {
                return false;
            }
        }
        return true;
    }
}


***LeetCode Q-485
-Counting max consecutive number of 1's in array

class Solution {
    public int findMaxConsecutiveOnes(int[] arr) {
        int n=arr.length;
        int count=0;
        int max=0;

        for (int i=0;i<n;i++){
            if(arr[i]==1){
                count++;
                max=Math.max(count,max);
            }
            else{
             count =0;
            }
        }
        return max;
    }
}


***LeetCode Q-169
-Majority Elements in a array

class Solution {
    public int majorityElement(int[] arr) {
        int maxFrequency=0;
        int maxEntry=arr[0];
        Map<Integer,Integer> map=new HashMap<>();
        for(int num:arr){
            map.put(num,map.getOrDefault(num,0)+1);
        }
        for(Map.Entry<Integer,Integer> entry:map.entrySet()){
            if(entry.getValue()>maxFrequency){
                maxFrequency=entry.getValue();
                maxEntry=entry.getKey();
            }
        }
        return maxEntry;
    }
}


***LeetCode Q-121
-Best time to buy and sell a stock

import java.util.*;
class Solution {
    public int maxProfit(int[] prices) {
        int min=Integer.MAX_VALUE;
        int maxProfit=0;
        for(int price:prices)
        {
            if(price <  min)
            {
                min=price;
            }
            else
            {
                int Profit=price-min;
                if(Profit>maxProfit)
                {
                    maxProfit=Profit;
                }
            }
        }
        return maxProfit;
    }
}


***LeetCode Q-2239
-Finding closest number to zero

class Solution {
    public int findClosestNumber(int[] arr) {
        int min=Integer.MAX_VALUE;
        for(int i=0;i<arr.length;i++)
        {
            if(Math.abs(arr[i])<Math.abs(min)){
                min =arr[i];
            }
            else if(arr[i]>min && Math.abs(arr[i])==Math.abs(min))
            {
                min =arr[i];
            }
        }
        return min;
    }
}


***LeetCode Q-14
-Longest common Prefix(common letters in a different words of provided array)

class Solution {
    public String longestCommonPrefix(String[] arr) {
        String prefix=arr[0];
        if(arr.length==0)
        {
            return " ";
        }
        for(int i=1;i<arr.length;i++){
        while(!arr[i].startsWith(prefix)){
            prefix=prefix.substring(0,prefix.length()-1);
            }
        }
        return prefix;
    }
}


***LeetCode Q-189
-Rotate array by given krange from back of array.

class Solution {
    public void rotate(int[] arr, int k) {
        k=k%arr.length;
        reverse(arr,0,arr.length-1);
        reverse(arr,0,k-1);
        reverse(arr,k,arr.length-1);
    }
    static void reverse(int[] arr, int start, int end){
        while(start<end){
            int temp=arr[start];
            arr[start]=arr[end];
            arr[end]=temp;
            start++;
            end--;
        }
    }
}


***LeetCode Q-
