*** Stacks:

-> Stack is a special data structure , which follows last in first out.
-> Which comes under linear data structures

Eg: * Push -To add ele ,which will be last ele.
    * Pop -To remove ele will enterd in last.
    * Peek -To check top ele.
    * isEmpty -To check stack is empty or not.
    * display -To display a stack.
    * Contains -To check stack contain required ele.

-> Stacks are used to get the out put in constant time,Which is Time Complexity:(O)1.
-> To return top ele use peek ,and use 
   Eg: return top+1;  //To get the size of stack.

Example Code: 
// To use all operation of stack.

import java.util.*;
class Main {
    public static void main(String[] args) {
        Stack<Integer> stack=new Stack<>();
        stack.push(10);
        stack.push(20);
        stack.push(30);
        stack.push(40);
        stack.push(50);

        //Removing a ele from stack.
        stack.pop();
        
        //Printing whole stack elements
        System.out.println(stack);
        
        //Peek Element
        System.out.println(stack.peek());
        
        // for contains()
        if(stack.contains(30))
        {
            System.out.println("Element is there");
        }
        else
        {
            System.out.println("Element is not there");
        }
        
        // For isEMpty()
        
         if(stack.isEmpty())
        {
            System.out.println("stack is Empty ");
        }
        else
        {
            System.out.println("Stack is not Empty");
        }
    }
}

---------------------------------------------------------------------------------------------------------
*** Sorting:

-> Sorting algo are used to make the UnSorted data into assending or desending.
-> To get the faster outputs.
Eg:   Bubble sort
      Selection sort
      Merge sort
      Quick sort
      Insertion sort
      Heap sort
      Counting sort
      Radix sort

-> Bubble sort:
   - Selecting the adjecent ele,comparing those ele and swap them.
   - Every Completion of every itteration weightest will go to end.

Example Code:
// To use all operation of Bubble sort Algorithm.

public class BubbleSortExample {
    public static void main(String[] args) {
        int[] arr = {5, 3, 8, 4, 2};

        System.out.println("Original array:");
        printArray(arr);

        bubbleSort(arr);

        System.out.println("Sorted array:");
        printArray(arr);
    }

    // Bubble Sort Algorithm
    public static void bubbleSort(int[] arr) {
        int n = arr.length;
        // Outer loop for each pass
        for (int i = 0; i < n - 1; i++) {
            // Inner loop for pairwise comparison
            for (int j = 0; j < n - i - 1; j++) {
                // If current element is greater than next, swap them
                if (arr[j] > arr[j + 1]) {
                    // Swap elements
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
            // Optional: print array after each pass to see progress
            System.out.print("After pass " + (i + 1) + ": ");
            printArray(arr);
        }
    }

    // Utility method to print array
    public static void printArray(int[] arr) {
        for (int value : arr) {
            System.out.print(value + " ");
        }
        System.out.println();
    }
}

Output:
Original array: 5 3 8 4 2 
After pass 1: 3 5 4 2 8 
After pass 2: 3 4 2 5 8 
After pass 3: 3 2 4 5 8 
After pass 4: 2 3 4 5 8 

Sorted array: 2 3 4 5 8 

=== Code Execution Successful ===

----------------------------------------------------------------------------------------------------------------
*** Selection Sort:
-> In the selection sort ,we have more time complexity due to the checking of each and every ele.

Example Code:
// To find the smallest index value using Selection sort.

public class SmallestIndexRecursiveSelection {
    public static void main(String[] args) {
        int[] arr = {5, 3, 8, 4, 2};

        int smallestIndex = findMinIndex(arr, 0, arr.length - 1);
        
        System.out.println("Smallest value: " + arr[smallestIndex]);
        System.out.println("Index of smallest value: " + smallestIndex);
    }

    // Recursive method to find the index of the smallest element
    public static int findMinIndex(int[] arr, int start, int end) {
        // Base case: only one element left
        if (start == end) {
            return start;
        }

        // Recursive step: find index of minimum in the rest of the array
        int minIndexRest = findMinIndex(arr, start + 1, end);

        // Return the smaller one between arr[start] and arr[minIndexRest]
        return (arr[start] < arr[minIndexRest]) ? start : minIndexRest;
    }
}

----------------------------------------------------------------------------------------------------------------
üìä Sorting Algorithm Time Complexity Comparison Table

| Sorting Algorithm	   |   Best Case	  | Average Case	| Worst Case  | Space Complexity	 | Stable  | 
------------------------|----------------|---------------|-------------|-------------------|---------| 
| Bubble Sort	         |   O(n)	        | O(n¬≤)	      |  O(n¬≤)	     |    O(1)	          | ‚úÖ Yes  |
| Insertion Sort	      |   O(n)	        | O(n¬≤)	      |  O(n¬≤)	     |    O(1)	          | ‚úÖ Yes  |
| Selection Sort	      |   O(n¬≤)	     | O(n¬≤)	      |  O(n¬≤)	     |    O(1)	          | ‚ùå No   |
| Quick Sort	         |   O(n log n)	  | O(n log n)	   |  O(n¬≤)	     |    O(log n)	    | ‚ùå No   |
| Merge Sort	         |   O(n log n)	  | O(n log n)	   |  O(n log n) |    O(n)	          | ‚úÖ Yes  |

-----------------------------------------------------------------------------------------------------------------
*** Queue:
-> A Queue is a linear data structure that follows the FIFO (First In, First Out) principle.
-> This means the first element added to the queue is the first one to be removed.

-> Basic Operations in Queue:
         - enqueue() ‚Äì Add an element to the rear (end)
         - dequeue() ‚Äì Remove an element from the front
         - peek() ‚Äì See the front element without removing
         - isEmpty() ‚Äì Check if the queue is empty

=> Types of Queue:  
| **Type**                        | **Definition**                                                                   |
|---------------------------------| ---------------------------------------------------------------------------------|
|   -Simple Queue                 | A basic queue that follows FIFO. Insertions at rear, deletions from front.       |
|   (Single Ended Queue)          | Eg: Front -> [10, 20, 30, 40] <- Rear                                            |                                     
|   -Circular Queue               | The last position is connected back to the first to make a circle. Reuses space. |
|   -Priority Queue               | Elements are served based on **priority**, not just order of insertion.          |
|   -Double-Ended Queue (Deque)   | Elements can be added or removed from **both front and rear**.                   |

***Dequeue: Remove an element from the front of the queue.
-> The element that was added first is the one that gets removed first.
-> This is what the dequeue() operation.
Eg: Front ‚Üí [10, 20, 30, 40] ‚Üê Rear

Code: Queue<Integer> queue = new LinkedList<>();
      queue.add(10);
      queue.add(20);
      queue.add(30);
      queue.remove(); // This is dequeue

-----------------------------------------------------------------------------------------------------------------------------
